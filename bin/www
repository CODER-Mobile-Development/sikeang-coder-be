require('dotenv').config();
const mongoose = require("mongoose");
const debug = require('debug')('sikeang-coder:server');
const http = require('http');
const os = require("os");
const {MONGO_URI} = require("../config/env");

let server;
const port = normalizePort(process.env.PORT || '3000');

const startDatabase = async () => {
  try {
    await mongoose.set('strictQuery', false);
    await mongoose?.connect(MONGO_URI)

    console.log('Connected to database!')
  } catch (e) {
    throw new Error(e)
  }
}

startDatabase()
    .then(() => {
        const app = require('../app');

        app.set('port', port);

        server = http.createServer(app);

        server.listen(port);

        server.on('error', onError);
        server.on('listening', onListening);
    })
    .catch((e) => {
        throw new Error(e)
    })

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  console.log(`sikeang-coder listening on port ${port}, hostname ${os.hostname}`)
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
